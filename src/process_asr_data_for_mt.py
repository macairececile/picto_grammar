import pandas as pd
import csv

corpus_name = ["cfpb", "cfpp", "clapi", "coralrom", "crfp", "fleuron", "frenchoralnarrative", "ofrom", "reunions",
               "tcof", "tufs", "valibel"]

punctuations = '!?\":,/.;()[]'
punc_table = str.maketrans({key: None for key in punctuations})

def read_data_from_grammar(csv_file):
    return pd.read_csv(csv_file, sep="\t")


def process_whisper_output(text):
    """
        Process the prediction from whisper model

        Arguments
        ---------
        text: str

        Returns
        -------
        The processed text.
    """
    t = text.replace('\n', '')
    a = t.translate(punc_table)
    b = a.replace('-', ' ').replace("«", " ").replace("»", " ")
    return ''.join(b.lower().strip())


def get_data_from_whisper(directory, model_prefix, corpus_name):
    """
    Read the data generated by whisper.

    Args:
        directory (str): The directory path.
        model_prefix (str): The prefix for the model.
        corpus_name (str): The name of the corpus.

    Returns:
        list: The predictions of the whisper model.
    """
    file_path = directory + model_prefix + corpus_name + "_out.txt"
    f = open(file_path, 'r')
    preds = [process_whisper_output(row[1]) for row in csv.reader(f, delimiter='\t')]
    f.close()
    return preds


def merge_data(data, src_sentence_asr):
    ids = []
    translation = []
    for i, row in data.iterrows():
        ids.append(row["clips"])
        translation.append({"fr": src_sentence_asr[int(i)], "frp": row["tgt"]})
    file = pd.DataFrame({"id": ids, "translation": translation})
    return file


def get_text_and_generate_file_orfeo(folder_data_asr, model_prefix, folder_to_save, folder_input):
    # orfeo
    test_orfeo = []
    for c in corpus_name:
        data = read_data_from_grammar(folder_input + "test_" + c + "_s2p.csv")
        src_sentences_ASR = get_data_from_whisper(folder_data_asr, model_prefix, c)
        file = merge_data(data, src_sentences_ASR)
        test_orfeo.append(file)
        file.to_csv(folder_to_save + "test_" + c + ".csv", sep='\t', index=False)
    all_test_orfeo = pd.concat(test_orfeo)
    all_test_orfeo.to_csv(folder_to_save + "test_orfeo.csv", sep='\t', index=False)


def get_text_and_generate_file_commonvoice(folder_data_asr, model_prefix, folder_to_save, folder_input, corpus_name):
    data = read_data_from_grammar(folder_input + "test_" + corpus_name + "_s2p.csv")
    src_sentences_ASR = get_data_from_whisper(folder_data_asr, model_prefix, corpus_name)
    file = merge_data(data, src_sentences_ASR)
    file.to_csv(folder_to_save + "test_" + corpus_name + ".csv", sep='\t', index=False)



if __name__ == '__main__':
    folder_data_asr = "/gpfswork/rech/czj/uef37or/ASR_S2P_data/whisper-large-v3/"
    model_prefix = "large-v3_"
    get_text_and_generate_file_orfeo(folder_data_asr, model_prefix,
         "/gpfswork/rech/czj/uef37or/Fine_tuning_t5/data_asr/whisper/",
         "/gpfswork/rech/czj/uef37or/data/orfeo/")
    get_text_and_generate_file_commonvoice(folder_data_asr, model_prefix,
                                     "/gpfswork/rech/czj/uef37or/Fine_tuning_t5/data_asr/whisper/",
                                     "/gpfswork/rech/czj/uef37or/data/commonvoice/", "commonvoice")